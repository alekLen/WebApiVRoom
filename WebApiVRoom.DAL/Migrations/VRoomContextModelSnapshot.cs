// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApiVRoom.DAL.EF;

#nullable disable

namespace WebApiVRoom.DAL.Migrations
{
    [DbContext(typeof(VRoomContext))]
    partial class VRoomContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryVideo", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("VideosId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "VideosId");

                    b.HasIndex("VideosId");

                    b.ToTable("CategoryVideo", (string)null);
                });

            modelBuilder.Entity("TagVideo", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.Property<int>("VideosId")
                        .HasColumnType("int");

                    b.HasKey("TagsId", "VideosId");

                    b.HasIndex("VideosId");

                    b.ToTable("TagVideo", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.AnswerPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommentPost_Id")
                        .HasColumnType("int");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("clerkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AnswerPosts", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.AnswerVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommentVideo_Id")
                        .HasColumnType("int");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("clerkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AnswerVideos", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.ChannelSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChannelBanner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChannelNikName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChannelPlofilePhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Channel_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("Notification")
                        .HasColumnType("bit");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ChannelSettings", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.CommentPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("clerkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentPosts", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.CommentVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.Property<string>("clerkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("CommentVideos", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.HistoryOfBrowsing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChannelSettingsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeCode")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelSettingsId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("HistoryOfBrowsings", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.LikesDislikesAP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("answerPostId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("answerPostId");

                    b.ToTable("LikesAP", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.LikesDislikesAV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("answerVideoId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("answerVideoId");

                    b.ToTable("LikesAV", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.LikesDislikesCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("commentPostId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("commentPostId");

                    b.ToTable("LikesCP", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.LikesDislikesCV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentPostId")
                        .HasColumnType("int");

                    b.Property<int>("commentVideoId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentPostId");

                    b.HasIndex("commentVideoId");

                    b.ToTable("LikesCV", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.LikesDislikesP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("LikesP", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.LikesDislikesV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.Property<bool>("like")
                        .HasColumnType("bit");

                    b.Property<DateTime>("likeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("LikesV", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChannelSettingsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelSettingsId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.OptionsForPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Options", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.PlayList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Access")
                        .HasColumnType("bit");

                    b.Property<int?>("ChannelSettingsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelSettingsId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayLists", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.PlayListVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayListId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayListId");

                    b.HasIndex("VideoId");

                    b.ToTable("PlayListVideos", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelSettingsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelSettingsId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelSettingsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubscriberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelSettingsId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelSettings_Id")
                        .HasColumnType("int");

                    b.Property<string>("Clerk_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChannelSettingsId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Cover")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsAgeRestriction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCopyright")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShort")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("LastViewedPosition")
                        .HasColumnType("time");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("ObjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VRoomVideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChannelSettingsId");

                    b.ToTable("Videos", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Voutes", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.WebRTCConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICECandidates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("SDP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WebRTCSessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WebRTCSessionId");

                    b.ToTable("WebRTCConnections", (string)null);
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.WebRTCSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuestUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WebRTCSessions", (string)null);
                });

            modelBuilder.Entity("CategoryVideo", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiVRoom.DAL.Entities.Video", null)
                        .WithMany()
                        .HasForeignKey("VideosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagVideo", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiVRoom.DAL.Entities.Video", null)
                        .WithMany()
                        .HasForeignKey("VideosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.AnswerPost", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.ChannelSettings", "User")
                        .WithMany("AnswerPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.AnswerVideo", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.ChannelSettings", "User")
                        .WithMany("AnswerVideos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.ChannelSettings", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.Country", "Country")
                        .WithMany("ChannelSettingss")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiVRoom.DAL.Entities.Language", "Language")
                        .WithMany("ChannelSettingss")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiVRoom.DAL.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Language");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.CommentPost", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.Post", "Post")
                        .WithMany("CommentPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApiVRoom.DAL.Entities.ChannelSettings", "User")
                        .WithMany("CommentPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.CommentVideo", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.ChannelSettings", "User")
                        .WithMany("CommentVideos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiVRoom.DAL.Entities.Video", "Video")
                        .WithMany("CommentVideos")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.HistoryOfBrowsing", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.ChannelSettings", null)
                        .WithMany("HistoryOfBrowsing")
                        .HasForeignKey("ChannelSettingsId");

                    b.HasOne("WebApiVRoom.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiVRoom.DAL.Entities.Video", "Video")
                        .WithMany("HistoryOfBrowsings")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.LikesDislikesAP", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.AnswerPost", "answerPost")
                        .WithMany()
                        .HasForeignKey("answerPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("answerPost");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.LikesDislikesAV", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.AnswerVideo", "answerVideo")
                        .WithMany()
                        .HasForeignKey("answerVideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("answerVideo");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.LikesDislikesCP", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.CommentPost", "commentPost")
                        .WithMany()
                        .HasForeignKey("commentPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("commentPost");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.LikesDislikesCV", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.CommentPost", null)
                        .WithMany("users")
                        .HasForeignKey("CommentPostId");

                    b.HasOne("WebApiVRoom.DAL.Entities.CommentVideo", "commentVideo")
                        .WithMany("users")
                        .HasForeignKey("commentVideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("commentVideo");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.LikesDislikesP", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.LikesDislikesV", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Notification", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.ChannelSettings", null)
                        .WithMany("Notifications")
                        .HasForeignKey("ChannelSettingsId");

                    b.HasOne("WebApiVRoom.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.OptionsForPost", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.Post", "Post")
                        .WithMany("Options")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.PlayList", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.ChannelSettings", null)
                        .WithMany("PlayLists")
                        .HasForeignKey("ChannelSettingsId");

                    b.HasOne("WebApiVRoom.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.PlayListVideo", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.PlayList", "PlayList")
                        .WithMany("PlayListVideos")
                        .HasForeignKey("PlayListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiVRoom.DAL.Entities.Video", "Video")
                        .WithMany("PlayListVideos")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlayList");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Post", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.ChannelSettings", "ChannelSettings")
                        .WithMany("Posts")
                        .HasForeignKey("ChannelSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelSettings");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Subscription", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.ChannelSettings", "ChannelSettings")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ChannelSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiVRoom.DAL.Entities.User", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId");

                    b.Navigation("ChannelSettings");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Video", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.ChannelSettings", "ChannelSettings")
                        .WithMany("Videos")
                        .HasForeignKey("ChannelSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelSettings");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Vote", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.OptionsForPost", "Option")
                        .WithMany("Voutes")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApiVRoom.DAL.Entities.Post", "Post")
                        .WithMany("Voutes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApiVRoom.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.WebRTCConnection", b =>
                {
                    b.HasOne("WebApiVRoom.DAL.Entities.WebRTCSession", "WebRTCSession")
                        .WithMany("Connections")
                        .HasForeignKey("WebRTCSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebRTCSession");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.ChannelSettings", b =>
                {
                    b.Navigation("AnswerPosts");

                    b.Navigation("AnswerVideos");

                    b.Navigation("CommentPosts");

                    b.Navigation("CommentVideos");

                    b.Navigation("HistoryOfBrowsing");

                    b.Navigation("Notifications");

                    b.Navigation("PlayLists");

                    b.Navigation("Posts");

                    b.Navigation("Subscriptions");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.CommentPost", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.CommentVideo", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Country", b =>
                {
                    b.Navigation("ChannelSettingss");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Language", b =>
                {
                    b.Navigation("ChannelSettingss");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.OptionsForPost", b =>
                {
                    b.Navigation("Voutes");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.PlayList", b =>
                {
                    b.Navigation("PlayListVideos");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Post", b =>
                {
                    b.Navigation("CommentPosts");

                    b.Navigation("Options");

                    b.Navigation("Voutes");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.Video", b =>
                {
                    b.Navigation("CommentVideos");

                    b.Navigation("HistoryOfBrowsings");

                    b.Navigation("PlayListVideos");
                });

            modelBuilder.Entity("WebApiVRoom.DAL.Entities.WebRTCSession", b =>
                {
                    b.Navigation("Connections");
                });
#pragma warning restore 612, 618
        }
    }
}
