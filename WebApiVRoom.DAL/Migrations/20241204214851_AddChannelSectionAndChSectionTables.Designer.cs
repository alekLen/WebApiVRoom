// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApiVRoom.DAL.EF;

#nullable disable

namespace WebApiVRoom.DAL.Migrations
{
    [DbContext(typeof(VRoomContext))]
    [Migration("20241127134951_AddChannelSectionAndChSectionTables")]
    partial class AddChannelSectionAndChSectionTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            // Создание конфигурации для таблицы ChSections
            modelBuilder.Entity("ChSections", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("ChSections");
            });

            // Создание конфигурации для таблицы ChannelSections
            modelBuilder.Entity("ChannelSections", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                // Внешний ключ для связи с ChannelSettings
                b.Property<int>("ChannelSettingsId")
                    .HasColumnType("int");

                // Свойства для разделов
                b.Property<int>("SectionId")
                    .HasColumnType("int"); // Внешний ключ для ChSections

                b.Property<int>("Order")
                    .HasColumnType("int");

                b.Property<bool>("IsVisible")
                    .HasColumnType("bit");

                b.HasKey("Id");

                // Индекс и внешний ключ для связи с ChannelSettings
                b.HasIndex("ChannelSettingsId");

                // Внешний ключ для связи с ChannelSettings
                //b.HasForeignKey("ChannelSettingsId")
                //    .OnDelete(DeleteBehavior.Cascade)
                //    .IsRequired();

                // Внешний ключ для связи с ChSections
                //b.HasForeignKey("SectionId")
                //    .OnDelete(DeleteBehavior.Cascade)
                //    .IsRequired();

                b.ToTable("ChannelSections");
            });

#pragma warning restore 612, 618
        }
    }
}